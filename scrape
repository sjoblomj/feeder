#!/bin/bash
maxelems=15

function json_filters_to_jq_tests() {
    local filters
    filters=$(echo "$1" | \
        perl -pe 's/,//g, s/[\[{]/(/g, s/[}\]]/)/g'  | # Remove commas and replace brackets with parenthesis
        perl -pe '1 while s/"not":(\(([^()]++|(?1))*\))/ ($1) | not/g' | # Repeatedly turn '"not":(.*)' into '(.*) | not'
        perl -pe 's/"filter":"([^"]*)"/test("\1")/g' | # Replace '"filter":".*"' with 'test(".*")'
        perl -pe 's/(\()?"(or|and)":/ \2 \1/g'         # Put 'or' and 'and' outside their parenthesis
    )
    if [[ "$filters" == "()" ]]; then
        filters=""
    fi
    echo "$filters"
}

declare -A domain_groups
declare -A site_outputs
site_order=()

# Group sites by domain
readarray sites < <(yq e -o=j -I=0 '.sites[]' sites.yaml)
for site in "${sites[@]}"; do
    url=$(echo "$site" | yq e '.url' -)
    domain=$(echo "$url" | awk -F/ '{print $3}')
    domain_groups["$domain"]+="$site"$'\n'
    site_outputs["$url"]="$(mktemp)"
    site_order+=("$url")
done

# Process each domain in parallel
for domain in "${!domain_groups[@]}"; do
    (
        echo "${domain_groups[$domain]}" | while read -r site; do
            if [[ -z "$site" ]]; then
                continue
            fi
            name=$(        echo "$site" | yq e '.name'         -)
            icon=$(        echo "$site" | yq e '.icon'         -)
            url=$(         echo "$site" | yq e '.url'          -)
            parser=$(      echo "$site" | yq e '.parser'       -)
            filters=$(     echo "$site" | yq e '.filters'      - | jq -rc 'add? // {}')
            insertValues=$(echo "$site" | yq e '.insertValues' - | jq     'add? // {}')
            displayUrl=$(  echo "$site" | yq e '.displayUrl'   -)
            description=$( echo "$site" | yq e '.description'  -)

            filters=$(json_filters_to_jq_tests "$filters")

            if [[ "$displayUrl" == "null" ]]; then
                displayUrl="$url"
            fi

            # Use a lock file to ensure serial execution for the same domain
            lockfile="/tmp/${domain}.lock"
            exec 200>"$lockfile"
            flock 200

            if [ -f parsers/"$parser".sh ]; then
                data=$(./parsers/"$parser".sh "$url" "$filters" $maxelems)
                echo "Fetched $name ..."
            else
                echo "Unable to find parser '$parser'"
                data="[]"
            fi

            if [[ "$insertValues" != "{}" ]]; then
                data=$(jq -n --argjson a "$data" --argjson b "$insertValues" '$a | map(. + $b)')
            fi
            site_data=$(echo "$data" | jq --arg name "$name" --arg icon "$icon" --arg url "$displayUrl" --arg description "$description" --argjson data "$data" '{"name": $name, "icon": $icon, "url": $url, "description": $description, "data": $data}')

            output_file="${site_outputs[$url]}"
            echo "$site_data" >> "$output_file"

            flock -u 200
            rm -f "$lockfile"
        done
    ) &
done

wait

echo "[]" > sitedata.json
# Loop over the domains in order and combine their outputs
for site in "${site_order[@]}"; do
    tmp=$(mktemp)
    site_output="${site_outputs[$site]}"

    jq -s '.[0] + .[1]' sitedata.json <(jq -s '.' "$site_output") > "$tmp" && mv "$tmp" sitedata.json
    rm -f "$site_output"
done
